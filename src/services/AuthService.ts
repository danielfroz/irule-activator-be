import { Config } from '../config'
import { v4 as uuid } from 'uuid'
import jwt from 'jsonwebtoken'

export interface TokenPayload {
  name: string,
  jti: string
}

export type LoginResult = {
  token: string
}

export class AuthService {
  private _auths = new Map<string, string>()

  constructor(readonly config: Config) {}

  async login(args:{ username: string, password: string }): Promise<LoginResult> {
    if(!args)
      throw new Error('args')
    if(!args.username)
      throw new Error('args.username')
    if(!args.password)
      throw new Error('args.password')

    const { username, password } = args
    const { service: server } = this.config

    if(username !== server.auth.username) {
      console.log(`auth/login: invalid username: ${username}`)
      throw new Error('invalid credentials')
    }
    if(password !== server.auth.password) {
      console.log(`auth/login: invalid password: ****`)
      throw new Error('invalid credentials')
    }

    const jti = uuid();
    const payload = {
      name: server.auth.username,
      jti,
    } as TokenPayload

    const token = jwt.sign(payload, this.config.service.jwt.salt)
    this._auths.set(jti, server.auth.username)

    console.log('auth/login; user logged in; token: %o', token)

    return Promise.resolve({ token })
  }

  /**
   * It is solely function is to remove the existing authentication record...
   */
  async logout(args:{ token: string }) {
    if(!args)
      throw new Error('args')
    if(!args.token)
      throw new Error('args.token')
    const { token } = args

    const payload = jwt.decode(token) as TokenPayload
    if(this._auths.has(payload.jti)) {
      this._auths.delete(payload.jti)
    }

    console.log('auth/logout: user logged out')

    return Promise.resolve()
  }

  async validate(args:{ token: string }): Promise<boolean> {
    if(!args)
      throw new Error('args')
    if(!args.token)
      throw new Error('args.token')
    const { token } = args
    const payload = jwt.decode(token) as TokenPayload
    if(this._auths.has(payload.jti)) {
      // no need to check the signature as we know it has been generated by this module.
      return true
    }
    const valid = jwt.verify(token, this.config.service.jwt.salt) as TokenPayload
    console.log('valid: %o', valid)
    this._auths.set(valid.jti, token)
    return true
  }
}